<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/escola/application/repositories/AlunoRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/escola/application/repositories/AlunoRepository.java" />
              <option name="originalContent" value="package com.example.escola.application.repositories;&#10;&#10;import com.example.escola.domain.entities.Aluno;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.Optional;&#10;&#10;/**&#10; * Interface Repository para a entidade Aluno.&#10; * Fornece todos os métodos de acesso a dados (CRUD) para Alunos.&#10; */&#10;@Repository&#10;public interface AlunoRepository extends JpaRepository&lt;Aluno, String&gt; {&#10;    Optional&lt;Aluno&gt; findByMatricula(Long matricula);&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.escola.application.repositories;&#10;&#10;import com.example.escola.domain.entities.Aluno;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.Optional;&#10;&#10;/**&#10; * Interface Repository para a entidade Aluno.&#10; * Fornece todos os métodos de acesso a dados (CRUD) para Alunos.&#10; */&#10;@Repository&#10;public interface AlunoRepository extends JpaRepository&lt;Aluno, String&gt; {&#10;    Optional&lt;Aluno&gt; findByMatricula(Long matricula);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/escola/controller/ProfessorController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/escola/controller/ProfessorController.java" />
              <option name="originalContent" value="package com.example.escola.controller;&#10;&#10;import com.example.escola.controller.dto.professor.ProfessorRequestDTO;&#10;import com.example.escola.controller.dto.professor.ProfessorResponseDTO;&#10;import com.example.escola.service.ProfessorService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;professores&quot;)&#10;public class ProfessorController {&#10;&#10;    @Autowired&#10;    private ProfessorService service;&#10;&#10;    @GetMapping&#10;    public List&lt;ProfessorResponseDTO&gt; getAllProfessores() {&#10;        return service.getAllProfessors();&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;ProfessorResponseDTO&gt; getProfessorById(@PathVariable String id) {&#10;        try {&#10;            ProfessorResponseDTO professor = service.getProfessorById(id);&#10;            return ResponseEntity.ok(professor);&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;    }&#10;&#10;    @CrossOrigin(origins = &quot;*&quot;, allowedHeaders = &quot;*&quot;)&#10;    @PostMapping&#10;    public ResponseEntity&lt;ProfessorResponseDTO&gt; saveProfessor(@RequestBody ProfessorRequestDTO data) {&#10;        ProfessorResponseDTO savedProfessor = service.createProfessor(data);&#10;        return ResponseEntity.ok(savedProfessor);&#10;    }&#10;&#10;    @CrossOrigin(origins = &quot;*&quot;, allowedHeaders = &quot;*&quot;)&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;ProfessorResponseDTO&gt; updateProfessor(@PathVariable String id, @RequestBody ProfessorRequestDTO data) {&#10;        try {&#10;            ProfessorResponseDTO updatedProfessor = service.updateProfessor(id, data);&#10;            return ResponseEntity.ok(updatedProfessor);&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;    }&#10;&#10;    @CrossOrigin(origins = &quot;*&quot;, allowedHeaders = &quot;*&quot;)&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteProfessor(@PathVariable String id) {&#10;        try {&#10;            service.deleteProfessor(id);&#10;            return ResponseEntity.ok().build();&#10;        } catch (Exception e) {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.escola.controller;&#10;&#10;import com.example.escola.controller.dto.professor.ProfessorRequestDTO;&#10;import com.example.escola.controller.dto.professor.ProfessorResponseDTO;&#10;import com.example.escola.service.ProfessorService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;professores&quot;)&#10;public class ProfessorController {&#10;&#10;    @Autowired&#10;    private ProfessorService service;&#10;&#10;    @GetMapping&#10;    public List&lt;ProfessorResponseDTO&gt; getAllProfessores() {&#10;        return service.getAllProfessors();&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;ProfessorResponseDTO&gt; getProfessorById(@PathVariable String id) {&#10;        try {&#10;            ProfessorResponseDTO professor = service.getProfessorById(id);&#10;            return ResponseEntity.ok(professor);&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;    }&#10;&#10;    @CrossOrigin(origins = &quot;*&quot;, allowedHeaders = &quot;*&quot;)&#10;    @PostMapping&#10;    public ResponseEntity&lt;ProfessorResponseDTO&gt; saveProfessor(@RequestBody ProfessorRequestDTO data) {&#10;        ProfessorResponseDTO savedProfessor = service.createProfessor(data);&#10;        return ResponseEntity.ok(savedProfessor);&#10;    }&#10;&#10;    @CrossOrigin(origins = &quot;*&quot;, allowedHeaders = &quot;*&quot;)&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;ProfessorResponseDTO&gt; updateProfessor(@PathVariable String id, @RequestBody ProfessorRequestDTO data) {&#10;        try {&#10;            ProfessorResponseDTO updatedProfessor = service.updateProfessor(id, data);&#10;            return ResponseEntity.ok(updatedProfessor);&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;    }&#10;&#10;    @CrossOrigin(origins = &quot;*&quot;, allowedHeaders = &quot;*&quot;)&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteProfessor(@PathVariable String id) {&#10;        try {&#10;            service.deleteProfessor(id);&#10;            return ResponseEntity.ok().build();&#10;        } catch (Exception e) {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/escola/infrastructure/web/dto/aluno/AlunoSimplificadoDTO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/escola/infrastructure/web/dto/aluno/AlunoSimplificadoDTO.java" />
              <option name="originalContent" value="package com.example.escola.infrastructure.web.dto.aluno;&#10;&#10;public record AlunoSimplificadoDTO(&#10;        Long matricula,&#10;        String nomeCompleto&#10;) {}&#10;" />
              <option name="updatedContent" value="package com.example.escola.infrastructure.web.dto.aluno;&#10;&#10;public record AlunoSimplificadoDTO(&#10;        Long matricula,&#10;        String nomeCompleto&#10;) {}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/escola/infrastructure/web/dto/turma/TurmaRequestDTO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/escola/infrastructure/web/dto/turma/TurmaRequestDTO.java" />
              <option name="originalContent" value="package com.example.escola.infrastructure.web.dto.turma;&#10;&#10;import java.util.List;&#10;&#10;public record TurmaRequestDTO(&#10;        String codigo,&#10;        Integer anoLetivo,&#10;        Integer semestre,&#10;        String horario,&#10;        String sala,&#10;        String professorId,&#10;        List&lt;Long&gt; alunosMatriculas&#10;) {}&#10;" />
              <option name="updatedContent" value="package com.example.escola.infrastructure.web.dto.turma;&#10;&#10;import java.util.List;&#10;&#10;public record TurmaRequestDTO(&#10;        String codigo,&#10;        Integer anoLetivo,&#10;        Integer semestre,&#10;        String horario,&#10;        String sala,&#10;        String professorId,&#10;        List&lt;Long&gt; alunosMatriculas&#10;) {}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>